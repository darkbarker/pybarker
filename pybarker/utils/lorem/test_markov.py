import unittest

from pybarker.utils.lorem.markov import Markov
import tempfile


class Test(unittest.TestCase):

    def test_Markov(self):
        with tempfile.NamedTemporaryFile(mode="w+") as tfile:
            tfile.write("шла саша по шоссе и сосала сушку от топота копыт пыль по полю летит церковь близко да ходить склизко читающий это предложение существует только пока читает меня по полю танки грохотали")
            mar = Markov(tfile)

            self.assertEqual(
                list(mar._triples()),
                [('шла', 'саша', 'по'), ('саша', 'по', 'шоссе'), ('по', 'шоссе', 'и'), ('шоссе', 'и', 'сосала'), ('и', 'сосала', 'сушку'), ('сосала', 'сушку', 'от'), ('сушку', 'от', 'топота'), ('от', 'топота', 'копыт'), ('топота', 'копыт', 'пыль'), ('копыт', 'пыль', 'по'), ('пыль', 'по', 'полю'), ('по', 'полю', 'летит'), ('полю', 'летит', 'церковь'), ('летит', 'церковь', 'близко'), ('церковь', 'близко', 'да'), ('близко', 'да', 'ходить'), ('да', 'ходить', 'склизко'), ('ходить', 'склизко', 'читающий'), ('склизко', 'читающий', 'это'), ('читающий', 'это', 'предложение'), ('это', 'предложение', 'существует'), ('предложение', 'существует', 'только'), ('существует', 'только', 'пока'), ('только', 'пока', 'читает'), ('пока', 'читает', 'меня'), ('читает', 'меня', 'по'), ('меня', 'по', 'полю'), ('по', 'полю', 'танки'), ('полю', 'танки', 'грохотали')]
            )

            self.assertEqual(
                mar.words,
                ['шла', 'саша', 'по', 'шоссе', 'и', 'сосала', 'сушку', 'от', 'топота', 'копыт', 'пыль', 'по', 'полю', 'летит', 'церковь', 'близко', 'да', 'ходить', 'склизко', 'читающий', 'это', 'предложение', 'существует', 'только', 'пока', 'читает', 'меня', 'по', 'полю', 'танки', 'грохотали']
            )
            self.assertEqual(mar.word_size, 31)
            self.assertEqual(
                mar.cache,
                {('шла', 'саша'): ['по'], ('саша', 'по'): ['шоссе'], ('по', 'шоссе'): ['и'], ('шоссе', 'и'): ['сосала'], ('и', 'сосала'): ['сушку'], ('сосала', 'сушку'): ['от'], ('сушку', 'от'): ['топота'], ('от', 'топота'): ['копыт'], ('топота', 'копыт'): ['пыль'], ('копыт', 'пыль'): ['по'], ('пыль', 'по'): ['полю'], ('по', 'полю'): ['летит', 'танки'], ('полю', 'летит'): ['церковь'], ('летит', 'церковь'): ['близко'], ('церковь', 'близко'): ['да'], ('близко', 'да'): ['ходить'], ('да', 'ходить'): ['склизко'], ('ходить', 'склизко'): ['читающий'], ('склизко', 'читающий'): ['это'], ('читающий', 'это'): ['предложение'], ('это', 'предложение'): ['существует'], ('предложение', 'существует'): ['только'], ('существует', 'только'): ['пока'], ('только', 'пока'): ['читает'], ('пока', 'читает'): ['меня'], ('читает', 'меня'): ['по'], ('меня', 'по'): ['полю'], ('полю', 'танки'): ['грохотали']}
            )

            self.assertEqual(len(mar.generate_text(size=5).split()), 5)
            self.assertEqual(len(mar.generate_text(size=1).split()), 1)
            self.assertEqual(len(mar.generate_text(size=100).split()), 100)

    # def test_vm(self):
    #     mar = Markov(open("/home/dimon/temp/vm.txt", mode='r', encoding="cp1251"))
    #     print(mar.generate_text(size=50))


if __name__ == '__main__':
    unittest.main()
